// Package weakspot_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package weakspot_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides a template about a weakspot experiment
type Experiment = interface{}

// WeakspotDescription Provides details about a weakspot
type WeakspotDescription struct {
	// AssesmentBaseQuery A Assessment Target Base Query that is used identifies targets that could have this weakspot.
	AssesmentBaseQuery string `json:"assesmentBaseQuery"`

	// AssesmentQueryAddon A Assessment Target Query Addon that is used to identify targets with this weakspot in the target list of the assesmentBaseQuery
	AssesmentQueryAddon string `json:"assesmentQueryAddon"`

	// Experiments A list of experiments that are available for this weakspot.
	Experiments *[]Experiment `json:"experiments,omitempty"`

	// Finding A description of the finding that is reported when the weakspot is found in mark down format.
	Finding *string `json:"finding,omitempty"`

	// Guidance A guidance why this weakspot is important in mark down format..
	Guidance *string `json:"guidance,omitempty"`

	// Icon A svg of an icon that represents the weakspot.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of weakspot. You will typically want to use something like `org.example.extension.my-fancy-weakspot`.
	Id string `json:"id"`

	// Instructions A description of the instructions how to fix this weakspot in mark down format.
	Instructions *string `json:"instructions,omitempty"`

	// Label A human-readable label for the weakspot.
	Label string `json:"label"`

	// LooksGood A description of the finding that is reported when the weakspot is not found in mark down format.
	LooksGood *string `json:"looksGood,omitempty"`

	// Tags A list of tags that describe the weakspot.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the weakspot. This is used to identify the version of the weakspot and is used for compatibility checks.
	Version string `json:"version"`
}

// WeakspotKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type WeakspotKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// WeakspotList Lists all weakspots that the platform/agent could consume.
type WeakspotList struct {
	Weakspots []DescribingEndpointReference `json:"weakspots"`
}

// WeakspotDescriptionResponse defines model for WeakspotDescriptionResponse.
type WeakspotDescriptionResponse struct {
	union json.RawMessage
}

// WeakspotListResponse defines model for WeakspotListResponse.
type WeakspotListResponse struct {
	union json.RawMessage
}

// AsWeakspotDescription returns the union data inside the WeakspotDescriptionResponse as a WeakspotDescription
func (t WeakspotDescriptionResponse) AsWeakspotDescription() (WeakspotDescription, error) {
	var body WeakspotDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeakspotDescription overwrites any union data inside the WeakspotDescriptionResponse as the provided WeakspotDescription
func (t *WeakspotDescriptionResponse) FromWeakspotDescription(v WeakspotDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeakspotDescription performs a merge with any union data inside the WeakspotDescriptionResponse, using the provided WeakspotDescription
func (t *WeakspotDescriptionResponse) MergeWeakspotDescription(v WeakspotDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWeakspotKitError returns the union data inside the WeakspotDescriptionResponse as a WeakspotKitError
func (t WeakspotDescriptionResponse) AsWeakspotKitError() (WeakspotKitError, error) {
	var body WeakspotKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeakspotKitError overwrites any union data inside the WeakspotDescriptionResponse as the provided WeakspotKitError
func (t *WeakspotDescriptionResponse) FromWeakspotKitError(v WeakspotKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeakspotKitError performs a merge with any union data inside the WeakspotDescriptionResponse, using the provided WeakspotKitError
func (t *WeakspotDescriptionResponse) MergeWeakspotKitError(v WeakspotKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t WeakspotDescriptionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WeakspotDescriptionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWeakspotList returns the union data inside the WeakspotListResponse as a WeakspotList
func (t WeakspotListResponse) AsWeakspotList() (WeakspotList, error) {
	var body WeakspotList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeakspotList overwrites any union data inside the WeakspotListResponse as the provided WeakspotList
func (t *WeakspotListResponse) FromWeakspotList(v WeakspotList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeakspotList performs a merge with any union data inside the WeakspotListResponse, using the provided WeakspotList
func (t *WeakspotListResponse) MergeWeakspotList(v WeakspotList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWeakspotKitError returns the union data inside the WeakspotListResponse as a WeakspotKitError
func (t WeakspotListResponse) AsWeakspotKitError() (WeakspotKitError, error) {
	var body WeakspotKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeakspotKitError overwrites any union data inside the WeakspotListResponse as the provided WeakspotKitError
func (t *WeakspotListResponse) FromWeakspotKitError(v WeakspotKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeakspotKitError performs a merge with any union data inside the WeakspotListResponse, using the provided WeakspotKitError
func (t *WeakspotListResponse) MergeWeakspotKitError(v WeakspotKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t WeakspotListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WeakspotListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXb2/bthP+Kgf++uoH1UmxFx38LluyLtiGZZmHYSgylKZO1jUUqZJUHKHwdx+O+mPZ",
	"opN0QPfOMo93zz333JH8LJStamvQBC+Wn4VDX1vjMX78ifLe1zZcoleO6kDW3PbrvKysCWgC/5R1rUlJ",
	"tjj76K3h/7wqsZJx1bS/FmL5/rN45bAQS/G/s33Us87OnyWiiV32sj0/Ubhyzjqxu9vtdpnIJz6WYgAN",
	"hXUQSoRueY2w7fcDmry2ZILIRKCgUSzF5WA0BIEx+V02cvMz+fAfkMJhvhYbIwmafJKJkQBGMWFhl/X5",
	"RLX0fJHZXPUubrFAh0ZFYg5B/Lha3YyhYFuSKiOW3wPKvF1TgFrLUFhXnckNmgDKNjoHZauqMUwqwpZC",
	"uRCZqJ2t0QXqNFthKG1+ImC3CMFC4xG2JRpQUmsymxj8ABS7RtNUYvlevLtaibtMhLZmOnxwZDYsglqG",
	"ch7qYu2tbgICL4Mt0r5rGQI6tv/7bPH/V2LmfpcJh58acpgzhhgrG/K721cneh4ohz3nu0xcPdboqOr1",
	"eIjyxtkHytGDhIAVs40g17YJICdtsXfAaFh50rQpaUxCTbpj2sunEeQYJGk/Cz8rrvQePcf4Tnr8rUHX",
	"JtiHC7aKZrCSboMB2ByiPYRSBiDPAsiBcjSBCkIPIVr6br0TWykfEEJJfgS0EAkRjKBigIs8T+WaQtUB",
	"ihsOYQU7IGtHXKz2QzBAJiqrs+iatxdbgqcE8H1xfQrw4HBi1sGUDkE+SNJyrYcpckQSBayi06fG1aFk",
	"enjSOcloG0OfGrzu/ATX4C4TBZmcsSfATr4HEnrrkVqHtXUB867vDwYfeShsY3KmtJLuHnK7NZxZJdM1",
	"3zSUy+Rgu4BhDbZle1wxD1QxCmlCMlYyGKm0ovzDhnOVBtiiy9Nh7dD3tcKnhUt5ymtAVfKE1XB9OZNl",
	"VxXdTvTJCbJrhjKGg79sA1vSmpfYmW5hy0n3o9dbnmNcHU33CB+s2yzwUVa1xgU+BjSerFlU7etCGtW+",
	"Hvx+SOdhfHCN4gz8C7Ux3QKl3TKugh7nDfYiNWi5Rp2KXDaVNK8dyjy2SrSbHbtpl9be+3fW5l9F7MaG",
	"LxR8kJsnhwSvd8HHu9VxjuNMmDt/vvUf0PnkIbIqEfrFgYu9CldczuRUPb0LJNPS7+Fa8eSSgdakKbSg",
	"SlT3fvHscU252KMeJNL3ciaSAzp1kNwljtrpoTrCsOuPqA7O3vEWOOPs9ofv4e2352/hxtm1xgou+wOY",
	"043XiYubax8T18RdO7wKYG3zNlohewav0EhH1s9O6u5If0FP4GOtpYmXZPA1KipIcaliJ1qlGhdvM0OV",
	"6g7xyTlwaij/cXsNbrga9V0yOfxL3Af/sqB9dRLTubQuZMfp+qaqpGuPPMcBmnYf//g3+Tzj+kiuXRoT",
	"tfUPiMOHzhwJ/+tBaj32Tz8GIoT0Fd74psL5zX10wB8vukA89eJ4yVg54mAP4O7E22febuyjz8izj9mb",
	"7451WVhORZPC/pU41sqJpfjleiUyYWSF/cdeVmL/Hpq0NbfnZLosxZvF+eKct9kajaxJLMU3izeL8+6Z",
	"UXqxNI3WkfC8UaeQ7v4JAAD//+tAhQkNEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
