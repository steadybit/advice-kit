// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// Defines values for ValidationType.
const (
	EXPERIMENT ValidationType = "EXPERIMENT"
	TEXT       ValidationType = "TEXT"
)

// AdviceDefinition Provides details about a advice
type AdviceDefinition struct {
	// AssessmentQueryApplicable A Assessment Target Base Query that is used identifies targets that could have this advice.
	AssessmentQueryApplicable string `json:"assessmentQueryApplicable"`

	// Icon A svg of an icon that represents the advice.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Status Provides details about a advice
	Status AdviceDefinitionStatus `json:"status"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionStatus Provides details about a advice
type AdviceDefinitionStatus struct {
	// ActionNeeded Provides details about a advice lifecycle status actions needed
	ActionNeeded AdviceDefinitionStatusActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about a advice lifecycle status implemented
	Implemented AdviceDefinitionStatusImplemented `json:"implemented"`

	// ValidationNeeded Provides details about a advice lifecycle status validation needed
	ValidationNeeded AdviceDefinitionStatusValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionStatusActionNeeded Provides details about a advice lifecycle status actions needed
type AdviceDefinitionStatusActionNeeded struct {
	// AssessmentQuery A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentQueryApplicable
	AssessmentQuery string `json:"assessmentQuery"`

	// Description Provides details description about a advice lifecycle status actions needed
	Description AdviceDefinitionStatusActionNeededDescription `json:"description"`
}

// AdviceDefinitionStatusActionNeededDescription Provides details description about a advice lifecycle status actions needed
type AdviceDefinitionStatusActionNeededDescription struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusImplemented Provides details about a advice lifecycle status implemented
type AdviceDefinitionStatusImplemented struct {
	// Description Provides details description about a advice lifecycle status implemented
	Description AdviceDefinitionStatusImplementedDescription `json:"description"`
}

// AdviceDefinitionStatusImplementedDescription Provides details description about a advice lifecycle status implemented
type AdviceDefinitionStatusImplementedDescription struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusValidationNeeded Provides details about a advice lifecycle status validation needed
type AdviceDefinitionStatusValidationNeeded struct {
	// Description Provides details description about a advice lifecycle status validation needed
	Description AdviceDefinitionStatusValidationNeededDescription `json:"description"`

	// Validation A list of validations that are available for this advice.
	Validation *[]Validation `json:"validation,omitempty"`
}

// AdviceDefinitionStatusValidationNeededDescription Provides details description about a advice lifecycle status validation needed
type AdviceDefinitionStatusValidationNeededDescription struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advice that the platform/agent could consume.
type AdviceList struct {
	Advice []DescribingEndpointReference `json:"advice"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides a experiment json exported from the ui
type Experiment = interface{}

// Validation Provides a either a template about a advice experiment or a textual validation like a checklist item
type Validation struct {
	// Description A human-readable description for the validation or for the experiment template. Markdown supported.
	Description *string `json:"description,omitempty"`

	// Experiment Provides a experiment json exported from the ui
	Experiment *Experiment `json:"experiment,omitempty"`

	// Id A technical ID that is used to uniquely identify this validation. You will typically want to use something like `org.example.extension.my-fancy-advice-validation.1`.
	Id string `json:"id"`

	// Name A human-readable name for the validation.
	Name string `json:"name"`

	// ShortDescription A human-readable short description for the validation or for the experiment template. Text Only.
	ShortDescription string `json:"shortDescription"`

	// Type The type of the validation. Either `EXPERIMENT` or `TEXT`.
	Type ValidationType `json:"type"`
}

// ValidationType The type of the validation. Either `EXPERIMENT` or `TEXT`.
type ValidationType string

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
