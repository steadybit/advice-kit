// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// AdviceDefinition Provides details about a advice
type AdviceDefinition struct {
	// AssessmentBaseQuery A Assessment Target Base Query that is used identifies targets that could have this advice.
	AssessmentBaseQuery string `json:"assessmentBaseQuery"`

	// AssessmentQueryAddon A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentBaseQuery
	AssessmentQueryAddon string `json:"assessmentQueryAddon"`

	// Description Provides details about a advice
	Description AdviceDefinitionDescription `json:"description"`

	// Experiments A list of experiments that are available for this advice.
	Experiments *[]Experiment `json:"experiments,omitempty"`

	// Icon A svg of an icon that represents the advice.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionDescription Provides details about a advice
type AdviceDefinitionDescription struct {
	// ActionNeeded Provides details about a advice actions needed
	ActionNeeded AdviceDefinitionDescriptionActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about a advice implemented
	Implemented AdviceDefinitionDescriptionImplemented `json:"implemented"`

	// ValidationNeeded Provides details about a validation actions needed
	ValidationNeeded AdviceDefinitionDescriptionValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionDescriptionActionNeeded Provides details about a advice actions needed
type AdviceDefinitionDescriptionActionNeeded struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionImplemented Provides details about a advice implemented
type AdviceDefinitionDescriptionImplemented struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionValidationNeeded Provides details about a validation actions needed
type AdviceDefinitionDescriptionValidationNeeded struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advices that the platform/agent could consume.
type AdviceList struct {
	Advices []DescribingEndpointReference `json:"advices"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides a template about a advice experiment
type Experiment = interface{}

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RY32/bNhD+VwiuD9ugKin20MJv3pJtxn5lmVdgKDKUps4WG4pUScqJEPh/H46kZElm",
	"mrg/lrfEJO++++67E493lOuq1gqUs3R2Rw3YWisL/p95sRUczmAtlHBCq8u4iGtcKwfK4Z+srqXgDHec",
	"vLNa4W+Wl1Axv6raP9Z09uaOPjOwpjP61cne5UnYZ0+mrugue8yBX4Q7N0Yburva7XYZLcByI2pvYUY7",
	"vGStDXElkLC8AsL8aQKqqLVQjmbUCSeBzuhZtyU4IH3Muyzy8auw7oszgU6+DAcxdCmsS8Ufw0b/g9h3",
	"WYwjqQv8bez1wuitKMCSAhwT0hK20o0jLHqnGa2NrsE4EZTGrAVrK1Due2bhzwZMe2h0Tub9NrJkZgOO",
	"4Hbi9xNXMkeEJY2FgogClBNrAZY4v9OGda4bWZCSbYG4UtiIJ0cC2hrjt84ItcFs7zF5+/OiSEWaAhXw",
	"+ANjVE53wNoe1o1w5RALEcrnKayHPOl1SF2CpQTwEcDjyu5scHSXUbitwYiqaw7TyDtsg20hXmaAsC0T",
	"kq1kp7wR2cJBZR8Cd96bRSwxTGYMw6gbJd43sAh2nGlgl1HB0xmy2w3CZIrgjgDRQG3ARsjwIR2IImXT",
	"AS+V4EySxdlBkgM42Q6yjfGjaQ8kOCP/6IbcCClxAU3Jltww5bwFC8TqClwp1IZIcQ3krTabHG5ZVUvI",
	"4daBskKrvGqfr5ni7fNg9W0yBslWIFNhlE3F1HMDrPCp8vsmrSJp0LHNByWB64GWvueOLfYKODT9cKK3",
	"YGyy7yxLIHGxL5pI9hIzkCzE+84Qpor+BHKCGmVOrIQUriW8BH5tE+zsMmrgfSMMFHT2BvWzR9ylIoo1",
	"o+maTvaecWVfHfTsYfH2oPTqHXC3/3qla/3TGzjHg78DFFB8QtOZD81g7aHYkYZPsroYWEH1MCkK9lnw",
	"vp6amiZ/xEvC9TjEz5nT+SQjR+WXBNyWqA7mON1CWWcantbOQVcZ7LZ9ifl/o3385lXMXJNC3ygstYq5",
	"nHzd6oZwpnwzrCXjUGpZgAnt8Nld+ELm169sXusiV6yC3TepZlVpJ7bskWD3m58Cqm2qiqUvPxOccef/",
	"D3Ki8A7xiOZspJChrAPMXv3HKHoxbgbHCXpYZlM1fzTpA6NPQfln4vV1oh8+ktx9P3uoY3w0xwMXTyfu",
	"45nup7KDgC9//IG8fHX6klwYvZJQkbNIKl4xfl4uL8j8YmH9ZUMKvA52MzlZ6aL1uwAtE8tBMSO0PSA7",
	"pOkRXMNtLZkK7NoauFgLjpcjf13VnDfGgOLQ5aIOiNPXZGUdUxxSXv++XBADawjGwm15MKCVsHd+nNOY",
	"lMSVv9TGZQ9IK1r29/K0ef/Dx8TzgOmJzEIYA5HFgX745HCIA3+1hEkZe1y8cHv3kjmsjBO2wbk0TL1c",
	"K9tUHs7k8haO+w/7Ywaz+EYi1OY8PiBcdmQ86gI/vSNF91fJV4hUiX0IwAFNvqS6lw5yUwpeeo7+csCK",
	"diXcfWxVVYMTngM/ox/ShtOZLu5xGBa7Ue6mBEVwwsNpDp2PQKFpUE2FZPx0vvRETKVYM1cmpLiyWjYO",
	"CC53sj6wXTPnwOD+f0/yb589KEfvK+viG6TFW+4oJ6OkD4b1+z8fjDiokG2Yfp73TwgUsaD0mGoP36WG",
	"bwIIO2raeh1NX9+usCutNQKSgkN8r+sr1dAZ/W2xpBnFr0H8Z99U6F4gfUvH1jyY5mb0RX6an+IhXYNi",
	"taAz+l3+Ij8NrJeWzlQjpVdO0fD7cO7+CwAA//98V4D9hxUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
