// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// Defines values for ValidationType.
const (
	EXPERIMENT ValidationType = "EXPERIMENT"
	TEXT       ValidationType = "TEXT"
)

// AdviceDefinition Provides details about advice.
type AdviceDefinition struct {
	// AssessmentQueryApplicable An Assessment Target Base Query that identifies targets that could have this advice.
	AssessmentQueryApplicable string `json:"assessmentQueryApplicable"`

	// Icon An svg of an icon that represents the advice, e.g. `data:image/svg+xml,%3Csvg....svg%3E%0A`.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Status Provides details about advice.
	Status AdviceDefinitionStatus `json:"status"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionStatus Provides details about advice.
type AdviceDefinitionStatus struct {
	// ActionNeeded Provides details about an advice lifecycle status actions needed.
	ActionNeeded AdviceDefinitionStatusActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about advice lifecycle status implemented.
	Implemented AdviceDefinitionStatusImplemented `json:"implemented"`

	// ValidationNeeded Provides details about advice lifecycle status validation needed.
	ValidationNeeded AdviceDefinitionStatusValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionStatusActionNeeded Provides details about an advice lifecycle status actions needed.
type AdviceDefinitionStatusActionNeeded struct {
	// AssessmentQuery A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentQueryApplicable
	AssessmentQuery string `json:"assessmentQuery"`

	// Description Provides details description about advice lifecycle status actions needed.
	Description AdviceDefinitionStatusActionNeededDescription `json:"description"`
}

// AdviceDefinitionStatusActionNeededDescription Provides details description about advice lifecycle status actions needed.
type AdviceDefinitionStatusActionNeededDescription struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusImplemented Provides details about advice lifecycle status implemented.
type AdviceDefinitionStatusImplemented struct {
	// Description Provides details description about a advice lifecycle status implemented.
	Description AdviceDefinitionStatusImplementedDescription `json:"description"`
}

// AdviceDefinitionStatusImplementedDescription Provides details description about a advice lifecycle status implemented.
type AdviceDefinitionStatusImplementedDescription struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusValidationNeeded Provides details about advice lifecycle status validation needed.
type AdviceDefinitionStatusValidationNeeded struct {
	// Description Provides details description about advice lifecycle status validation needed.
	Description AdviceDefinitionStatusValidationNeededDescription `json:"description"`

	// Validation A list of validations that are available for this advice.
	Validation *[]Validation `json:"validation,omitempty"`
}

// AdviceDefinitionStatusValidationNeededDescription Provides details description about advice lifecycle status validation needed.
type AdviceDefinitionStatusValidationNeededDescription struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advice that the platform/agent could consume.
type AdviceList struct {
	Advice []DescribingEndpointReference `json:"advice"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides an experiment definition to automate the validation.
// It may contain advice placeholders, which will be substituted with target properties, but otherwise contains only fixed values.
// An experiment definition can be exported as JSON from the UI.
type Experiment = interface{}

// ExperimentTemplate Provides an experiment template definition to automate the validation.
// It may contain advice placeholders, which will be substituted with target properties, and supports experiment template variables, which can be set dynamically during the experiment creation process through the UI.
// An experiment template definition can be exported as JSON from the UI.
// An experiment template definition has precedence over an experiment definition. For compatibility reasons both can be given.
type ExperimentTemplate = interface{}

// Validation Provides either a textual explanation, an experiment or an experiment template to validate the advice recommendations.
type Validation struct {
	// Description A human-readable description for the validation or for the experiment template. Markdown supported.
	Description *string `json:"description,omitempty"`

	// Experiment Provides an experiment definition to automate the validation.
	// It may contain advice placeholders, which will be substituted with target properties, but otherwise contains only fixed values.
	// An experiment definition can be exported as JSON from the UI.
	Experiment *Experiment `json:"experiment,omitempty"`

	// ExperimentTemplate Provides an experiment template definition to automate the validation.
	// It may contain advice placeholders, which will be substituted with target properties, and supports experiment template variables, which can be set dynamically during the experiment creation process through the UI.
	// An experiment template definition can be exported as JSON from the UI.
	// An experiment template definition has precedence over an experiment definition. For compatibility reasons both can be given.
	ExperimentTemplate *ExperimentTemplate `json:"experimentTemplate,omitempty"`

	// Id A technical ID that is used to uniquely identify this validation. You will typically want to use something like `org.example.extension.my-fancy-advice-validation.1`.
	Id string `json:"id"`

	// Name A human-readable name for the validation.
	Name string `json:"name"`

	// ShortDescription A human-readable short description for the validation or for the experiment template. Text Only.
	ShortDescription string `json:"shortDescription"`

	// Type The type of the validation. Distinguishes between a textual description of a manual validation and a dynamic validation by an experiment.
	Type ValidationType `json:"type"`
}

// ValidationType The type of the validation. Distinguishes between a textual description of a manual validation and a dynamic validation by an experiment.
type ValidationType string

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
