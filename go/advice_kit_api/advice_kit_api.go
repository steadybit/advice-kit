// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// AdviceDefinition Provides details about a advice
type AdviceDefinition struct {
	// AssessmentBaseQuery A Assessment Target Base Query that is used identifies targets that could have this advice.
	AssessmentBaseQuery string `json:"assessmentBaseQuery"`

	// AssessmentQueryAddon A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentBaseQuery
	AssessmentQueryAddon string `json:"assessmentQueryAddon"`

	// Description Provides details about a advice
	Description AdviceDefinitionDescription `json:"description"`

	// Experiments A list of experiments that are available for this advice.
	Experiments *[]Experiment `json:"experiments,omitempty"`

	// Icon A svg of an icon that represents the advice.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionDescription Provides details about a advice
type AdviceDefinitionDescription struct {
	// ActionNeeded Provides details about a advice actions needed
	ActionNeeded AdviceDefinitionDescriptionActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about a advice implemented
	Implemented AdviceDefinitionDescriptionImplemented `json:"implemented"`

	// ValidationNeeded Provides details about a validation actions needed
	ValidationNeeded AdviceDefinitionDescriptionValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionDescriptionActionNeeded Provides details about a advice actions needed
type AdviceDefinitionDescriptionActionNeeded struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionImplemented Provides details about a advice implemented
type AdviceDefinitionDescriptionImplemented struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionValidationNeeded Provides details about a validation actions needed
type AdviceDefinitionDescriptionValidationNeeded struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advice that the platform/agent could consume.
type AdviceList struct {
	Advice []DescribingEndpointReference `json:"advice"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides a template about a advice experiment
type Experiment = interface{}

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYXXPbthL9Kzu4ebj3DiM704dk9KbWbqvpl+uqmelk3AkErkTEIMAAoGyOR/+9swBJ",
	"kRQc2/lo3mwB2D179uwSizsmTFkZjdo7Nr9jFl1ltMPwzyLfSYFnuJFaemn0ZbtIa8Joj9rTn7yqlBSc",
	"dpy8c0bTb04UWPKwqpvfNmz+5o49s7hhc/afk4PLk7jPnUxdsX32mAM/SX9urbFsf7Xf7zOWoxNWVsHC",
	"nHV4YWMs+AIhLq8ReDgNqPPKSO1Zxrz0CtmcnXVbogPoY95nLR8/S+e/OBPk5Mtw0IaupPOp+Nuwyf8g",
	"9n3WxpHUBf029nphzU7m6CBHz6VywNem9sBb7yxjlTUVWi+j0rhz6FyJ2n/LHf5eo22OjS5g0W+DFbdb",
	"9EDbIewHX3AP0kHtMAeZo/ZyI9GBDztdXBemVjkUfIfgC+laPDMioKkofuet1FvK9gFTsL/I81SkKVAR",
	"TzgwRuVNB6zpYd1IXwyxgNQhT3E95slsYuoSLCWAjwA+rezOBkf3GcPbCq0su+YwjbzDNtgW4+UWge+4",
	"VHytOuWNyJYeS/cQuPPeLGFpw+TWcoq61vJ9jctox9sa9xmTIp0ht9sSTK6BdkSIFiuLroWMH9KBzFM2",
	"PYpCS8EVLM+OkhzBqWaQbYqfTAcg0Rn8ZWq4kUrRAplSDdxw7YMFh+BMib6QegtKXiO8NXY7w1teVgpn",
	"eOtRO2n0rGyeb7gWzfNo9W0yBsXXqFJhFHXJ9XOLPA+pCvsmrSJp0PPtByVB65GWvueOLfYKODb9cKJ3",
	"aF2y76wKhHaxL5qW7BVlIFmI950BrvP+BHFCGuVerqWSvgFRoLh2CXb2GbP4vpYWczZ/Q/o5IO5S0Yo1",
	"Y+maTvaecWVfHfXsYfH2oMz6HQp/+Hqla/3TG7igg78i5ph/QtNZDM1Q7ZHYiYZPsrocWCH1cCVz/lnw",
	"vp6amiZ/xEvC9TjEz5nTxSQjT8ovRNwOdAdznG6pnbe1SGvnqKsMdru+xMK/rX365pXcXkNubjSVWsn9",
	"DP7bmBoE16EZVooLLIzK0cZ2+OwufiFn16/crDL5TPMS9/9LNavSeLnjjwR72Pw1oLq6LHn68jPB2e78",
	"90FOFN4hHtGcjRQylHWE2av/KYpejpvB0wQ9LLOpmj+a9IHRr0H5Z+L1daIfPpLcQz97qGN8NMcDF19P",
	"3E9nup/KjgK+/P47ePnq9CVcWLNWWMJZSypdMX5crS5gcbF04bKhJF0Hu5kc1iZvwi4ky+AEam6lcUdk",
	"xzQ9gmu8rRTXkV1XoZAbKehyFK6rRojaWtQCu1xUEXH6mqyd51pgyuufl0uwuMFoLN6WBwNagQfnT3Pa",
	"JiVx5S+M9dkD0moth3t52nz44WPiecD0RGYxjIHI2oF++ORwjIN+dcCV6npcABK8K+6pME74lsbSOPQK",
	"o11dBjSTu1u80tFn/TFjWftCIvX2vH0+uOyoeNT1fXpDit6vkk8Qqfr6kP8jjkI9dc8ccFNIUQSG/vDI",
	"82Yt/X1clWVN453HMKAfk0ajmcnvcRgXuznupkANNN7RKEfOR6DINOq6JC5+OF8FIqY6rLgvEjpcO6Nq",
	"j0DLnaaPbFfce7S0/++T2f+fPajF4Cvr4hukJVjuKIdRzgeT+v3fDg4eS2Ibp9/mw/sBIyykPK6b40ep",
	"4YMAwW4V7YKMpk9vV9SSNoYAKSmwfazry9SyOftluWIZo09B+8+ho7CDQPp+Tn15MMrN2YvZ6eyUDpkK",
	"Na8km7NvZi9mp5H1wrG5rpUKyslrcR/O/T8BAAD//zAuB6mEFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
