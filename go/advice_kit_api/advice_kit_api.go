// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// AdviceDefinition Provides details about a advice
type AdviceDefinition struct {
	// AssessmentQueryActionNeeded A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentQueryApplicable
	AssessmentQueryActionNeeded string `json:"assessmentQueryActionNeeded"`

	// AssessmentQueryApplicable A Assessment Target Base Query that is used identifies targets that could have this advice.
	AssessmentQueryApplicable string `json:"assessmentQueryApplicable"`

	// Description Provides details about a advice
	Description AdviceDefinitionDescription `json:"description"`

	// Experiments A list of experiments that are available for this advice.
	Experiments *[]Experiment `json:"experiments,omitempty"`

	// Icon A svg of an icon that represents the advice.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionDescription Provides details about a advice
type AdviceDefinitionDescription struct {
	// ActionNeeded Provides details about a advice actions needed
	ActionNeeded AdviceDefinitionDescriptionActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about a advice implemented
	Implemented AdviceDefinitionDescriptionImplemented `json:"implemented"`

	// ValidationNeeded Provides details about a validation actions needed
	ValidationNeeded AdviceDefinitionDescriptionValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionDescriptionActionNeeded Provides details about a advice actions needed
type AdviceDefinitionDescriptionActionNeeded struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionImplemented Provides details about a advice implemented
type AdviceDefinitionDescriptionImplemented struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceDefinitionDescriptionValidationNeeded Provides details about a validation actions needed
type AdviceDefinitionDescriptionValidationNeeded struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.k8s.pod.name})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advice that the platform/agent could consume.
type AdviceList struct {
	Advice []DescribingEndpointReference `json:"advice"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides a template about a advice experiment
type Experiment = interface{}

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RY32/bNhD+Vw5cH7ZBdVLsoYXfvCXbjP3KMq/AUGQoTZ0tNhSpkpQTIfD/PhwpyZKs",
	"xE7aLm+2SN59993HI493TJi8MBq1d2x6xyy6wmiH4c8s3UiBZ7iSWnpp9GU9SGPCaI/a009eFEoKTjNO",
	"Pjij6ZsTGeY8jOrqjxWbvrtjLyyu2JR9dbJzeRLnuZOhK7ZNjlnwi/Tn1hrLtlfb7TZhKTphZREsTFmD",
	"F1bGgs8Q4vASgYfVgDotjNSeJcxLr5BN2VkzJTqANuZtUvPxq3T+izNBTr4MB3XoSjo/Fn8dNvnvxL5N",
	"6jhGdUHf+l4vrNnIFB2k6LlUDvjSlB547Z0lrLCmQOtlVBp3Dp3LUfs/S7TVTJCd3xFTTPeNz2DWTocF",
	"t2v0EJbBLE2NBp9xD9JB6TAFb0CmqL1cVeDDXAc30mfgM+kaMqQO1MTxSI1ZRbYGwGKCl4pC8FVBjDlv",
	"pV6TPu6ffFQM33OHdSC9EGr8El0bQRgXplQpZHyD3WAmY8h6zh+3E886S7cJw9sCrcybejGMquGuMy2C",
	"5RaBb7hUxEctxh5m6TF3h8Cdt2YJSx0mt5ZXLGGllh9LnEc73pa4TZgUY/KcgdusCSbXQDMiRIuFRVdD",
	"xofolKOq9CgyLQVXMD/bE2EEp6qOGil+Mh2ARGfwjynhRipFA2RKVXDDtQ8WHIIzOfpM6jUoeY3w3tj1",
	"BG95Xiic4K1H7aTRk7x6ueJaVC+j1fejMSi+RDUWRlbmXL+0yNOQqjBvUD1GDXq+flASNB5pactw32Kr",
	"gH3ThxO9QetGS9EiQ6gH201dk72gDIwWivvWANdpu4I4IY1yL5dSSV+ByFBcuxF2tgmz+LGUlurZO9LP",
	"DnGTilqsD5WR5MFC2d/mV3s1vbuTW4Rm+QGF351u4xv/0wv8oKI/sQL14qWNSMonNj7J6rxjhaTElUz5",
	"Z8H7dmhqqATeT+Ce636InzOnD5+xB/ILEbcD3cDsp1tq520pxrWzV2I6s12738Lf2j4d0Dm315CaG037",
	"Lud+Al9XpgTBdaiMheICM6NStLE2vriLh+Xk+o2bFCadaJ7j9puxypUbLzf8SLC7yc8B1ZV5zm11BM56",
	"5v8PcqDwBnGP5qSnkK6sI8xW/Y9R9LxfDB4n6O42G6r5yaR3jD4H5Z+J17cj9fBIcnf17FDFeDLHHRfP",
	"J+7HM912bXsBX/74A7x+c/oaLqxZKszhrCaV7hs/LxYXMLuYu3DzUJLuhk3PDkuTVmEWkmVwAjW30rg9",
	"smOajuAabwvFdWTXFSjkSgq6KYW7qxGitBa1wCYXRUQ8fmfWznMtRnuhvy/nYHGF0Vi8Oneangx3zh/n",
	"tE7KyP0/M9YnB6RVWw6X9HHz4cNT4jlgeiCzGEZHZHXD332S2MdBXx1wpZoaF4AE74p72hgnfE39Z2wk",
	"hdGuzAOawd0tXunoWD+mR6tfUKRen9fPC5cNFUfd5Yc3pOj9avSJYmx/PeR/j6Own5pnELjJpMgCQ395",
	"5Gm1lP4+rvK8pF7PY3hN2CeN+jST3uMwDjZN3U2GGqjXo76OnPdAkWnUZU5c/HS+CEQMdVhwn43ocOmM",
	"Kj0CDTea3rNdcO/R0vx/TybfvjioxeAraeLrpCVYbiiHXs47bfv9ZwcHjzmxjcOzefeYwAgLKY/rav/R",
	"qvs6QLBrRbsgo+HT3BWVpJUhQEoKrB/z2m1q2ZT9Nl+whNFRUP/ZVRS2E0hbz6kud/q6KXs1OZ2c0iJT",
	"oOaFZFP23eTV5DSynjk21aVSQTlpKe7Duf0vAAD///Zjk6KkFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
