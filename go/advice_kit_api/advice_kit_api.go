// Package advice_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package advice_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	GET DescribingEndpointReferenceMethod = "GET"
)

// Defines values for ValidationType.
const (
	EXPERIMENT ValidationType = "EXPERIMENT"
	TEXT       ValidationType = "TEXT"
)

// AdviceDefinition Provides details about advice.
type AdviceDefinition struct {
	// AssessmentQueryApplicable An Assessment Target Base Query that identifies targets that could have this advice.
	AssessmentQueryApplicable string `json:"assessmentQueryApplicable"`

	// Icon An svg of an icon that represents the advice, e.g. `data:image/svg+xml,%3Csvg....svg%3E%0A`.
	Icon string `json:"icon"`

	// Id A technical ID that is used to uniquely identify this type of advice. You will typically want to use something like `org.example.extension.my-fancy-advice`.
	Id string `json:"id"`

	// Label A human-readable label for the advice.
	Label string `json:"label"`

	// Status Provides details about advice.
	Status AdviceDefinitionStatus `json:"status"`

	// Tags A list of tags that describe the advice.
	Tags *[]string `json:"tags,omitempty"`

	// Version The version of the advice. This is used to identify the version of the advice and is used for compatibility checks.
	Version string `json:"version"`
}

// AdviceDefinitionStatus Provides details about advice.
type AdviceDefinitionStatus struct {
	// ActionNeeded Provides details about an advice lifecycle status actions needed.
	ActionNeeded AdviceDefinitionStatusActionNeeded `json:"actionNeeded"`

	// Implemented Provides details about advice lifecycle status implemented.
	Implemented AdviceDefinitionStatusImplemented `json:"implemented"`

	// ValidationNeeded Provides details about advice lifecycle status validation needed.
	ValidationNeeded AdviceDefinitionStatusValidationNeeded `json:"validationNeeded"`
}

// AdviceDefinitionStatusActionNeeded Provides details about an advice lifecycle status actions needed.
type AdviceDefinitionStatusActionNeeded struct {
	// AssessmentQuery A Assessment Target Query Addon that is used to identify targets with this advice in the target list of the assessmentQueryApplicable
	AssessmentQuery string `json:"assessmentQuery"`

	// Description Provides details description about advice lifecycle status actions needed.
	Description AdviceDefinitionStatusActionNeededDescription `json:"description"`
}

// AdviceDefinitionStatusActionNeededDescription Provides details description about advice lifecycle status actions needed.
type AdviceDefinitionStatusActionNeededDescription struct {
	// Instruction A human-readable instructions of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Instruction string `json:"instruction"`

	// Motivation A human-readable motivation of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Motivation string `json:"motivation"`

	// Summary A human-readable summary of the action needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusImplemented Provides details about advice lifecycle status implemented.
type AdviceDefinitionStatusImplemented struct {
	// Description Provides details description about a advice lifecycle status implemented.
	Description AdviceDefinitionStatusImplementedDescription `json:"description"`
}

// AdviceDefinitionStatusImplementedDescription Provides details description about a advice lifecycle status implemented.
type AdviceDefinitionStatusImplementedDescription struct {
	// Summary A human-readable summary of the implemented in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceDefinitionStatusValidationNeeded Provides details about advice lifecycle status validation needed.
type AdviceDefinitionStatusValidationNeeded struct {
	// Description Provides details description about advice lifecycle status validation needed.
	Description AdviceDefinitionStatusValidationNeededDescription `json:"description"`

	// Validation A list of validations that are available for this advice.
	Validation *[]Validation `json:"validation,omitempty"`
}

// AdviceDefinitionStatusValidationNeededDescription Provides details description about advice lifecycle status validation needed.
type AdviceDefinitionStatusValidationNeededDescription struct {
	// Summary A human-readable summary of the validation needed in mark down format. (you can use placeholder like ${target.attr('k8s.pod.name')})
	Summary string `json:"summary"`
}

// AdviceKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type AdviceKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// AdviceList Lists all advice that the platform/agent could consume.
type AdviceList struct {
	Advice []DescribingEndpointReference `json:"advice"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// Experiment Provides an experiment definition to automate the validation.
// It may contain advice placeholders, which will be substituted with target properties, but otherwise contains only fixed values.
// An experiment definition can be exported as JSON from the UI.
type Experiment = interface{}

// ExperimentTemplate Provides an experiment template definition to automate the validation.
// It may contain advice placeholders, which will be substituted with target properties, and supports experiment template variables, which can be set dynamically during the experiment creation process through the UI.
// An experiment template definition can be exported as JSON from the UI.
// An experiment template definition has precedence over an experiment definition. For compatibility reasons both can be given.
type ExperimentTemplate = interface{}

// Validation Provides either a textual explanation, an experiment or an experiment template to validate the advice recommendations.
type Validation struct {
	// Description A human-readable description for the validation or for the experiment template. Markdown supported.
	Description *string `json:"description,omitempty"`

	// Experiment Provides an experiment definition to automate the validation.
	// It may contain advice placeholders, which will be substituted with target properties, but otherwise contains only fixed values.
	// An experiment definition can be exported as JSON from the UI.
	Experiment *Experiment `json:"experiment,omitempty"`

	// ExperimentMultiplierAttribute The attribute that is used to multiply the validation experiment. The attribute must be an array.
	ExperimentMultiplierAttribute *string `json:"experimentMultiplierAttribute,omitempty"`

	// ExperimentTemplate Provides an experiment template definition to automate the validation.
	// It may contain advice placeholders, which will be substituted with target properties, and supports experiment template variables, which can be set dynamically during the experiment creation process through the UI.
	// An experiment template definition can be exported as JSON from the UI.
	// An experiment template definition has precedence over an experiment definition. For compatibility reasons both can be given.
	ExperimentTemplate *ExperimentTemplate `json:"experimentTemplate,omitempty"`

	// Id A technical ID that is used to uniquely identify this validation. You will typically want to use something like `org.example.extension.my-fancy-advice-validation.1`.
	Id string `json:"id"`

	// Name A human-readable name for the validation.
	Name string `json:"name"`

	// ShortDescription A human-readable short description for the validation or for the experiment template. Text Only.
	ShortDescription string `json:"shortDescription"`

	// Type The type of the validation. Distinguishes between a textual description of a manual validation and a dynamic validation by an experiment.
	Type ValidationType `json:"type"`
}

// ValidationType The type of the validation. Distinguishes between a textual description of a manual validation and a dynamic validation by an experiment.
type ValidationType string

// AdviceDefinitionResponse defines model for AdviceDefinitionResponse.
type AdviceDefinitionResponse struct {
	union json.RawMessage
}

// AdviceListResponse defines model for AdviceListResponse.
type AdviceListResponse struct {
	union json.RawMessage
}

// AsAdviceDefinition returns the union data inside the AdviceDefinitionResponse as a AdviceDefinition
func (t AdviceDefinitionResponse) AsAdviceDefinition() (AdviceDefinition, error) {
	var body AdviceDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceDefinition overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceDefinition
func (t *AdviceDefinitionResponse) FromAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceDefinition performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceDefinition
func (t *AdviceDefinitionResponse) MergeAdviceDefinition(v AdviceDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceDefinitionResponse as a AdviceKitError
func (t AdviceDefinitionResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceDefinitionResponse as the provided AdviceKitError
func (t *AdviceDefinitionResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceDefinitionResponse, using the provided AdviceKitError
func (t *AdviceDefinitionResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceDefinitionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceDefinitionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdviceList returns the union data inside the AdviceListResponse as a AdviceList
func (t AdviceListResponse) AsAdviceList() (AdviceList, error) {
	var body AdviceList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceList overwrites any union data inside the AdviceListResponse as the provided AdviceList
func (t *AdviceListResponse) FromAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceList performs a merge with any union data inside the AdviceListResponse, using the provided AdviceList
func (t *AdviceListResponse) MergeAdviceList(v AdviceList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdviceKitError returns the union data inside the AdviceListResponse as a AdviceKitError
func (t AdviceListResponse) AsAdviceKitError() (AdviceKitError, error) {
	var body AdviceKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdviceKitError overwrites any union data inside the AdviceListResponse as the provided AdviceKitError
func (t *AdviceListResponse) FromAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdviceKitError performs a merge with any union data inside the AdviceListResponse, using the provided AdviceKitError
func (t *AdviceListResponse) MergeAdviceKitError(v AdviceKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdviceListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdviceListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
